[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\Sabri\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\Sabri\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.10.0 (Amazon.com Inc. Java 11.0.23)
[debug] Load.defaultLoad until apply took 449.024ms
[debug]           Load.loadUnit: plugins took 299.8726ms
[debug]           Load.loadUnit: defsScala took 0.6864ms
[debug] [Loading] Scanning directory E:\MovieRatingsProject\project
[debug]             Load.loadUnit: mkEval took 19.2898ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in E:\MovieRatingsProject\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 40.5082 ms
[info] loading settings for project movieratingsproject-build from idea.sbt ...
[debug]               Load.resolveProject(movieratingsproject-build) took 87.8064ms
[debug]             Load.loadTransitive: finalizeProject(Project(id movieratingsproject-build, base: E:\MovieRatingsProject\project, plugins: List(<none>))) took 153.7835ms
[debug] [Loading] Done in E:\MovieRatingsProject\project, returning: (movieratingsproject-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 6890.1701ms
[debug]           Load.loadUnit: cleanEvalClasses took 12.7754ms
[debug]         Load.loadUnit(file:/E:/MovieRatingsProject/project/, ...) took 7216.3142ms
[debug]       Load.apply: load took 7486.1036ms
[debug]       Load.apply: resolveProjects took 12.3958ms
[debug]       Load.apply: finalTransforms took 131.3355ms
[debug]       Load.apply: config.delegates took 17.9712ms
[debug]       Load.apply: Def.make(settings)... took 1350.6309ms
[debug]       Load.apply: structureIndex took 339.3718ms
[debug]       Load.apply: mkStreams took 17.0251ms
[info] loading project definition from E:\MovieRatingsProject\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 14271.6335ms
[debug]     Load.loadUnit: defsScala took 0.005ms
[debug] [Loading] Scanning directory E:\MovieRatingsProject
[debug]       Load.loadUnit: mkEval took 0.3167ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 6.7414 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 84.2324ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: E:\MovieRatingsProject, plugins: List(<none>))) took 94.0182ms
[debug] [Loading] Done in E:\MovieRatingsProject, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 4869.3816ms
[debug]     Load.loadUnit: cleanEvalClasses took 12.6255ms
[debug]   Load.loadUnit(file:/E:/MovieRatingsProject/, ...) took 19156.5335ms
[debug] Load.apply: load took 19211.7276ms
[debug] Load.apply: resolveProjects took 0.7791ms
[debug] Load.apply: finalTransforms took 68.6149ms
[debug] Load.apply: config.delegates took 0.7732ms
[debug] Load.apply: Def.make(settings)... took 281.7769ms
[debug] Load.apply: structureIndex took 103.9177ms
[debug] Load.apply: mkStreams took 0.0036ms
[info] set current project to MovieRatingsProject (in build file:/E:/MovieRatingsProject/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 49684 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 49684, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to MovieRatingsProject (in build file:/E:/MovieRatingsProject/)
[debug] > Exec(idea-shell, None, None)
